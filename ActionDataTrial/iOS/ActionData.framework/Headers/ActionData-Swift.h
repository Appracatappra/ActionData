// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ActionData",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;
@class UIImage;

/// Creates an image view that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the image view from or a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the image view to the icon field
/// myImage.dataPath = "icon"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData16ADBoundImageView")
@interface ADBoundImageView : UIImageView
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the image view to the icon field
/// myLabel.dataPath = "icon"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the image view to the enabled field
/// myImageView.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myImageView.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myImageView.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a label that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the label from or supply a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the name field
/// myLabel.dataPath = "name"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData12ADBoundLabel")
@interface ADBoundLabel : UILabel
/// The name of the field from the date model or forumla (using SQL syntax) used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the name field
/// myLabel.dataPath = "name"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the enabled field
/// myLabel.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myLabel.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the text color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myLabel.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
/// Defines the type of formatter that will be used to format the value of this text field before it is displayed to the user. The currently supported formats are “number”, “masked” or “date”.
@property (nonatomic, copy) NSString * _Nonnull formatType;
/// Works with the <code>formatType</code> property to format the value that is displayed to the user based on the pattern given in this string. For example, “$###,###.00” for a number or “mm/dd/yyyy” for a date.
@property (nonatomic, copy) NSString * _Nonnull formatPattern;
/// Initializes a new instance of the control.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a progress view that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the progress from or a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var percentage = 100
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the progress to the percentage field
/// myProgress.dataPath = "percentage"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData19ADBoundProgressView")
@interface ADBoundProgressView : UIProgressView
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var percentage = 100
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the progress to the percentage field
/// myProgress.dataPath = "percentage"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the progress view to the enabled field
/// myProgressView.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myProgressView.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the progress tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myProgress.progressColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>progressColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull progressColorPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the track tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myProgress.trackColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>trackColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull trackColorPath;
/// Sets the minimum value for the progress.
@property (nonatomic) float minValue;
/// Sets the maximum value for the progress.
@property (nonatomic) float maxValue;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a segmented control that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to select the segment from or use a formula in a SQL like syntax. Use the <code>byTitle</code> propert to decide if the segment is selected by title or integer position.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the segemented control to the type field
/// mySegment.dataPath = "type"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData23ADBoundSegmentedControl")
@interface ADBoundSegmentedControl : UISegmentedControl
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the segemented control to the type field
/// mySegment.dataPath = "type"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the segmented control to the enabled field
/// mySegmentedControl.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// mySegmentedControl.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySegmentedControl.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
/// If <code>true</code> this segmented control causes the parent <code>ADBoundViewController</code> to update the form as the value changes.
@property (nonatomic) BOOL liveUpdate;
/// If <code>true</code> the segment is selected by its title, else it is selected by its integer position.
@property (nonatomic) BOOL byTitle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithItems:(NSArray * _Nullable)items SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a slider that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the slider’s value from or use a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var percentage = 100
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the slider to the percentage field
/// mySlider.dataPath = "percentage"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData13ADBoundSlider")
@interface ADBoundSlider : UISlider
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var percentage = 100
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the slide to the percentage field
/// mySlider.dataPath = "percentage"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the slider to the enabled field
/// mySlider.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// mySlider.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the minimum track tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySlider.minColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>minColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull minColorPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the maximum track tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySlider.maxColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>maxColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull maxColorPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the thumb tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySlider.thumbColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>thumbColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull thumbColorPath;
/// If <code>true</code> this slider cause the parent <code>ADBoundViewController</code> to update the form as the value of the slider changes.
@property (nonatomic) BOOL liveUpdate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a stepper that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the stepper’s value from or a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var percentage = 100
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the stepper to the percentage field
/// myStepper.dataPath = "percentage"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData14ADBoundStepper")
@interface ADBoundStepper : UIStepper
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var percentage = 100
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the stepper to the percentage field
/// myStepper.dataPath = "percentage"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the stepper to the enabled field
/// myStepper.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myStepper.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myStepper.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
/// If <code>true</code> this stepper cause the parent <code>ADBoundViewController</code> to update the form as the value changes.
@property (nonatomic) BOOL liveUpdate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a switch that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the switch from or a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the switch to the enabled field
/// mySwitch.dataPath = "enabled"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData13ADBoundSwitch")
@interface ADBoundSwitch : UISwitch
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the switch to the enabled field
/// mySwitch.dataPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the switch to the enabled field
/// mySwitch.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// mySwitch.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the on tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySwitch.onColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>onColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull onColorPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the off tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySwitch.offColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>offColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull offColorPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the thumb tint color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// mySwitch.thumbColorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>thumbColorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull thumbColorPath;
/// If <code>true</code> this switch cause the parent <code>ADBoundViewController</code> to update the form as the value changes.
@property (nonatomic) BOOL liveUpdate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Creates a text field that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the text field from or use a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the name field
/// myTextField.dataPath = "name"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData16ADBoundTextField")
@interface ADBoundTextField : UITextField <UITextFieldDelegate>
/// The name of the field from the date model or formula (in the SQL syntax) used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the name field
/// myTextField.dataPath = "name"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the text field to the enabled field
/// myTextField.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myTextField.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the text color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myTextField.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
/// If <code>true</code> this text view cause the parent <code>ADBoundViewController</code> to update the form when the value changes. Works with the <code>onEndEdit</code> property, if it’s <code>true</code> the change will only be sent when the user finishes editing the field, else the change will be sent on individual character changes.
@property (nonatomic) BOOL liveUpdate;
/// Works with the <code>liveUpdate</code> property, if it’s <code>true</code> the change will only be sent when the user finishes editing the field, else the change will be sent on individual character changes.
@property (nonatomic) BOOL onEndEdit;
/// If <code>true</code> a <em>Done</em> accessory button will be displayed along with the onscreen keyboard when this field is edited.
@property (nonatomic) BOOL showDoneButton;
/// If <code>true</code> <em>Previous</em> and <em>Next</em> accessory buttons will be displayed along with the onscreen keyboard when this field is edited.
@property (nonatomic) BOOL showPrevNextButtons;
/// If <code>true</code> this <code>ADBoundTextField</code> will resign first responder and close the onscreen keyboard when the <em>Return</em> key is tapped.
@property (nonatomic) BOOL closeOnReturn;
/// Defines the type of formatter that will be used to format the value of this text field before it is displayed to the user. The currently supported formats are “number”, “masked” or “date”.
@property (nonatomic, copy) NSString * _Nonnull formatType;
/// Works with the <code>formatType</code> property to format the value that is displayed to the user based on the pattern given in this string. For example, “$###,###.00” for a number or “mm/dd/yyyy” for a date.
@property (nonatomic, copy) NSString * _Nonnull formatPattern;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIPickerView;

/// Creates a text field that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the text field from or use a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the name field
/// myTextField.dataPath = "name"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData17ADBoundTextPicker")
@interface ADBoundTextPicker : UITextField <UIPickerViewDataSource, UIPickerViewDelegate, UITextFieldDelegate>
/// The name of the field from the date model or formula (in the SQL syntax) used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the label to the name field
/// myTextField.dataPath = "name"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// Sets the title that is displayed over the picker view.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Defines a comma separated list of options that will be displayed in the attached picker controller for the user to select from. Updating this property will automatically update the <code>optionList</code> property.
@property (nonatomic, copy) NSString * _Nonnull optionValues;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the text field to the enabled field
/// myTextField.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myTextField.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the text color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myTextPicker.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
/// If <code>true</code> this text view cause the parent <code>ADBoundViewController</code> to update the form when the value changes. Works with the <code>onEndEdit</code> property, if it’s <code>true</code> the change will only be sent when the user finishes editing the field, else the change will be sent on individual character changes.
@property (nonatomic) BOOL liveUpdate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSTextAttachment;
@class NSTextContainer;

/// Creates a text view that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to populate the text view from or a formula in a SQL like syntax.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the text view to the description field
/// myTextView.dataPath = "description"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData15ADBoundTextView")
@interface ADBoundTextView : UITextView <UITextViewDelegate>
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the text view to the description field
/// myTextView.dataPath = "description"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the text view to the enabled field
/// myTextView.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myTextView.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the text color from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the text color based on a formula.
/// myTextView.colorPath = "highlightColor"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>colorPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull colorPath;
/// If <code>true</code> this text view cause the parent <code>ADBoundViewController</code> to update the form when the value changes. Works with the <code>onEndEdit</code> property, if it’s <code>true</code> the change will only be sent when the user finishes editing the field, else the change will be sent on individual character changes.
@property (nonatomic) BOOL liveUpdate;
/// If <code>true</code>, the text view will be dimmed when it is not editable, else it will not be dimmed.
@property (nonatomic) BOOL dimOnDisabled;
/// Works with the <code>liveUpdate</code> property, if it’s <code>true</code> the change will only be sent when the user finishes editing the field, else the change will be sent on individual character changes.
@property (nonatomic) BOOL onEndEdit;
/// If <code>true</code> a <em>Done</em> accessory button will be displayed along with the onscreen keyboard when this view is edited.
@property (nonatomic) BOOL showDoneButton;
/// If <code>true</code> <em>Previous</em> and <em>Next</em> accessory buttons will be displayed along with the onscreen keyboard when this view is edited.
@property (nonatomic) BOOL showPrevNextButtons;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer SWIFT_UNAVAILABLE;
@end

@class NSBundle;

/// A <code>ADBoundViewController</code> provides a method to attach it to a data model (any Swift class or structure that conforms to the <code>Codable</code> protocol) and any control conforming to the <code>ADBindable</code> protocol on any <em>View</em> or <em>SubView</em> will automatically be populated with the values from the data model based on the <code>dataPath</code> property of the control. The <code>dataPath</code> must match the name and case of a field on the attached data model or be a formula using a SQL like syntax.
/// By using the <code>setDataModel</code> function to set the model and automatically populate the fields, you to not need to create <em>Actions</em> or <em>Outlets</em> for the individual controls. The <code>ADBoundViewController</code> will automatically handle the reading and writing of properties for you.
/// For any <code>ADBindable</code> control that is editable, calling the <code>getDataModel</code> function will return the values from the controls on the <em>View</em> and <em>SubViews</em>. These will be written to the field of the data model as specified by the <code>dataPath</code> property of the control, as a result, a formula should not be used for the <code>dataPath</code> of any field that is readable.
/// For any field that requires onscreen keyboard support, the <code>ADBoundViewController</code> will automatically handle keyboard events such as moving fields hidden by the keyboard so they are visible and moving them back after they lose focus. Accessory tools can be automatically added to the keyboard to move between the text entry fields and to close the keyboard based on options for each control. These buttons can be customized using the <code>prevButtonText</code>, <code>prevButtonImage</code>, <code>nextButtonText</code>, <code>nextButtonImage</code>, <code>doneButtonText</code> and <code>doneButtonImage</code> properties of the <code>ADBoundViewController</code>.
/// The <code>ADBoundTextPicker</code> control has an embedded picker view that will be handled automatically by the <code>ADBoundViewController</code> in a similar fashion as th onscreen keyboard. If the field is covered by the picker, it will be moved automatically to be shown and moved back when the picker is closed. An accessory toolbar will be added to the picker that can be customized with the <code>cancelButtonText</code>, <code>cancelButtonImage</code>, <code>doneButtonText</code> and <code>doneButtonImage</code> properties of the <code>ADBoundViewController</code>.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Populate any control on the View with values from the data model
/// let category = Category(name: "Swift File", description: "A file containing swift source code.")
/// do {
///    try setDataModel(category)
/// } catch {
///    print("Failed to set data model")
/// }
///
/// // Read the vaules back from the controls
/// do {
///     let category = try getDataModel(Category.self)
///     print("Category Description: \(category.description)")
/// } catch {
///    print("Unable to read data model")
/// }
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData21ADBoundViewController")
@interface ADBoundViewController : UIViewController
/// Sets the text of the <em>Previous</em> button for <code>ADBoundTextField</code> and <code>ADBoundTextView</code> controls that show the previous and next accessory buttons.
@property (nonatomic, copy) NSString * _Nonnull prevButtonText;
/// Sets the image of the <em>Previous</em> button for <code>ADBoundTextField</code> and <code>ADBoundTextView</code> controls that show the previous and next accessory buttons.
@property (nonatomic, strong) UIImage * _Nullable prevButtonImage;
/// Sets the text of the <em>Next</em> button for <code>ADBoundTextField</code> and <code>ADBoundTextView</code> controls that show the previous and next accessory buttons.
@property (nonatomic, copy) NSString * _Nonnull nextButtonText;
/// Sets the image of the <em>Next</em> button for <code>ADBoundTextField</code> and <code>ADBoundTextView</code> controls that show the previous and next accessory buttons.
@property (nonatomic, strong) UIImage * _Nullable nextButtonImage;
/// Sets the text of the <em>Done</em> button for <code>ADBoundTextField</code>, <code>ADBoundTextPicker</code> and <code>ADBoundTextView</code> controls that show the done accessory button.
@property (nonatomic, copy) NSString * _Nonnull doneButtonText;
/// Sets the image of the <em>Done</em> button for <code>ADBoundTextField</code>, <code>ADBoundTextPicker</code> and <code>ADBoundTextView</code> controls that show the done accessory button.
@property (nonatomic, strong) UIImage * _Nullable doneButtonImage;
/// Sets the text of the <em>Cancel</em> button for <code>ADBoundTextPicker</code> control that show the cancel accessory button.
@property (nonatomic, copy) NSString * _Nonnull cancelButtonText;
/// Sets the image of the <em>Cancel</em> button for <code>ADBoundTextPicker</code> control that show the cancel accessory button.
@property (nonatomic, strong) UIImage * _Nullable cancelButtonImage;
/// Initializes a new instance of the <code>ADBoundViewController</code>.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Scans the <em>Views</em> and <em>SubViews</em> controlled by this <code>ADBoundViewController</code> for any controls conforming to the <code>ADBindable</code> protocol and monitors any keyboard events.
- (void)viewWillAppear:(BOOL)animated;
/// Stops monitoring keyboard events.
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKWebViewConfiguration;

/// Creates a web view that can be bound to a value from a data model that conforms to the <code>Codable</code> protocol when placed on a <code>ADBoundViewController</code> view. Use the <code>dataPath</code> property to specify the field from the bound data model to use as the URL or the HTML data to display in the web view. Use the <code>containsHTML</code> property to decide if the <code>dataPath</code> contains a <code>URL</code> or <code>HTML</code> data.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///     var url = "http://google.com"
///
///     required init() {
///
///     }
/// }
///
/// // Bind the web view to the url field
/// myWebView.dataPath = "url"
///
/// \endcode
SWIFT_CLASS("_TtC10ActionData14ADBoundWebView")
@interface ADBoundWebView : WKWebView
/// The name of the field from the date model used to populate the value from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///     var url = "http://google.com"
///
///     required init() {
///
///     }
/// }
///
/// // Bind the web view to the url field
/// myWebView.dataPath = "url"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>dataPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>.
@property (nonatomic, copy) NSString * _Nonnull dataPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the enabled state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Bind the web view to the enabled field
/// myWebView.enabledPath = "enabled"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>enabledPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull enabledPath;
/// The name of the field from the date model or forumla (using SQL syntax) used to set the hidden state from.
/// <h2>Example:</h2>
/// \code
/// // Given the following class
/// class Category: ADDataTable {
///
///     enum CategoryType: String, Codable {
///         case local
///         case web
///     }
///
///     static var tableName = "Categories"
///     static var primaryKey = "id"
///     static var primaryKeyType: ADDataTableKeyType = .computedInt
///
///     var id = 0
///     var added = Date()
///     var name = ""
///     var description = ""
///     var enabled = true
///     var quantity = 0
///     var highlightColor = UIColor.white.toHex()
///     var type: CategoryType = .local
///     var icon: Data = UIImage().toData()
///
///     required init() {
///
///     }
/// }
///
/// // Set the hidden state based on a formula.
/// myWebView.hiddenPath = "quantity > 0"
///
/// \endcoderemark:
/// The case and name of the field specified in the <code>hiddenPath</code> property must match the case and name from the data model bound to the <code>ADBoundViewController</code>. Optionally, the value can be a forumla using a subset of the SQL syntax.
@property (nonatomic, copy) NSString * _Nonnull hiddenPath;
/// If <code>true</code> the <code>dataPath</code> property contains raw HTML that needs to be displayed, if <code>false</code> the <code>dataPath</code> contains a URL to display.
@property (nonatomic) BOOL containsHTML;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
